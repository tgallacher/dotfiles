{
  self,
  config,
  pkgs,
  upkgs,
  vars,
  inputs,
  system,
  ...
}: let
  alacrittyFileExtension = version:
    if pkgs.lib.versionAtLeast version "0.13"
    then "toml"
    else "yml";
in {
  home.username = vars.username;
  home.homeDirectory = vars.homedir;

  home.packages = [
    pkgs.whatsapp-for-linux
    upkgs.alacritty-theme

    # wayland
    upkgs.bluez # bluetooth
    upkgs.bluez-tools # bluetooth
    upkgs.blueman # bluetooth
    inputs.nixpkgs-wayland.packages.${system}.grim
    inputs.nixpkgs-wayland.packages.${system}.mako
    inputs.nixpkgs-wayland.packages.${system}.slurp
    inputs.nixpkgs-wayland.packages.${system}.swaylock-effects
    inputs.nixpkgs-wayland.packages.${system}.swww
    inputs.nixpkgs-wayland.packages.${system}.waybar
    inputs.nixpkgs-wayland.packages.${system}.wlogout
    inputs.nixpkgs-wayland.packages.${system}.wofi
  ];

  programs = {
    alacritty = {
      enable = true;
      package = upkgs.alacritty;
      # see: https://alacritty.org/config-alacritty.html
      settings = {
        import = [
          "${upkgs.alacritty-theme}/catppuccin_mocha.${alacrittyFileExtension upkgs.alacritty.version}"
        ];
        live_config_reload = true;
        cursor = {
          style = {
            shape = "Block";
            blinking = "On";
          };
          # unfocussed_hollow = true;
          vi_mode_style = {shape = "Underline";};
        };
        colors.draw_bold_text_with_bright_colors = true;
        # fullscreen = false;
        font = {
          size = 10;
          normal = {
            family = "JetBrainsMono Nerd Font";
            style = "Regular";
          };
          bold = {
            family = "JetBrainsMono Nerd Font";
            style = "Bold";
          };
          italic = {
            family = "JetBrainsMono Nerd Font";
            style = "Bold";
          };
          # Offset is the extra space around each character. offset.y can be thought of
          # as modifying the linespacing, and offset.x as modifying the letter spacing.
          offset = {
            x = 0;
            y = 0;
          };
          # Glyph offset determines the locations of the glyphs within their cells with
          # the default being at the bottom. Increase the x offset to move the glyph to
          # the right, increase the y offset to move the glyph upward.
          glyph_offset = {
            x = 0;
            y = 0;
          };
        };
        keyboard.bindings = [
          {
            key = "Key3";
            mods = "Alt";
            chars = "#";
          } # Alt + #
        ];
        mouse = {
          hide_when_typing = true;
        };
        # save_to_clipboard = true;
        window = {
          dimensions = {
            lines = 30;
            columns = 160;
          };
          padding = {
            x = 4;
            y = 4;
          };
          # Window decorations
          # Setting this to false will result in window without borders and title bar.
          decorations = "full";
          startup_mode = "Windowed";
          dynamic_title = true;
          opacity = 1.0;
        };
      };
    };
    git = {
      enable = true;
      aliases = {
        co = "checkout";
        ci = "commit";
        st = "status -s";
        br = "branch";
        last = "log -1 HEAD";
        dwdiff = "!f() { git diff $@ | dwdiff --diff-input -P -c | less -R; }; f";
        plog = "!l() { git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit $@; }; l";
        plog10 = "plog -10";
        p10 = "plog -10";
        p20 = "plog -20";
      };
      delta = {
        enable = true;
        options = {
          navigate = true; # use n and N to move between diff sections
          light = false; # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
          side-by-side = true;
          line-numbers = true;
        };
      };
      extraConfig = {
        core = {editor = "vim";};
        merge = {conflictstyle = "diff3";};
        diff = {colorMoved = "default";};
        rebase = {instructionFormat = "(%an) %s";};
        init = {defaultBranch = "main";};
        advice = {skippedCherryPicks = false;};
        # interactive = { diffFilter = "delta --color-only"; };
        push = {
          default = "simple";
          autoSetupRemote = true;
        };
      };
      userEmail = "tgallacher@users.noreply.github.com";
      userName = "Tom Gallacher";
      ignores = [
        ".DS_Store"
        # Logs
        "logs"
        "*.log"
        "npm-debug.log*"
        "yarn-debug.log*"
        "yarn-error.log*"
        # Runtime data
        "pids"
        "*.pid"
        "*.seed"
        "*.pid.lock"
        # Directory for instrumented libs generated by jscoverage/JSCover
        "lib-cov"
        # Coverage directory used by tools like istanbul
        "coverage"
        # nyc test coverage
        ".nyc_output"
        # Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
        ".grunt"
        # Bower dependency directory (https://bower.io/)
        "bower_components"
        # node-waf configuration
        ".lock-wscript"
        # Compiled binary addons (https://nodejs.org/api/addons.html)
        "build/Release"
        # Dependency directories
        "node_modules/"
        # Typescript v1 declaration files
        "typings/"
        # Optional npm cache directory
        ".npm"
        # Optional eslint cache
        ".eslintcache"
        # Optional REPL history
        ".node_repl_history"
        # Output of 'npm pack'
        "*.tgz"
        # Yarn Integrity file
        ".yarn-integrity"
        # dotenv environment variables file
        ".env"
        # next.js build output
        ".next"
      ];
    };
    starship = {
      enable = true;
      settings = {
        add_newline = true;
        git_commit.only_detached = false;
        git_metrics.disabled = false;
      };
    };
    tmux = {
      enable = true;
      package = upkgs.tmux;
      baseIndex = 1;
      clock24 = true;
      disableConfirmationPrompt = false;
      keyMode = "vi";
      mouse = true;
      prefix = "C-t";
      terminal = "xterm-256color";
      extraConfig = ''
        # set-option -g renumber-windows on             # Re-number remaining windows when one is closed
        set -g status-position top

        unbind -T copy-mode-vi MouseDragEnd1Pane        # don"t exit copy mode when dragging with mouse

        # vim keys to switch windows
        bind -n M-h previous-window
        bind -n M-l next-window

        # Keep zoom when moving up/down panes
        bind-key -n M-k select-pane -U \; resize-pane -Z
        bind-key -n M-j select-pane -D \; resize-pane -Z

        # Easier window split + retain cwd
        unbind '"'
        bind v split-window -v -c "#{pane_current_path}"
        unbind %
        bind h split-window -h -c "#{pane_current_path}"

        # Easy config reload
        bind-key r source-file ~/.config/tmux/tmux.conf \; display-message "tmux.conf reloaded..."

        # Set copy mode to immitate Vim keybindings.
        # Here we adjust the key bind to the copy-mode-vi table in tmux, eg. does not require prefix
        bind-key -T copy-mode-vi v send-keys -X begin-selection
        bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
        bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel
      '';
      plugins = with upkgs; [
        tmuxPlugins.yank
        tmuxPlugins.sessionist
        tmuxPlugins.vim-tmux-navigator
        {
          plugin = tmuxPlugins.catppuccin;
          extraConfig = ''
            set -g @catppuccin_flavour "mocha"
            set -g @catppuccin_window_tabs_enabled on
            set -g @catppuccin_date_time "%Y-%m-%d %H:%M"
            set -g @catppuccin_window_status_enable "no"
            set -g @catppuccin_window_status_icon_enable "yes"
            set -g @catppuccin_icon_window_last "󰖰"
            set -g @catppuccin_icon_window_current "󰖯"
            set -g @catppuccin_icon_window_zoom "󰁌"
            set -g @catppuccin_icon_window_mark "󰃀"
            set -g @catppuccin_icon_window_silent "󰂛"
            set -g @catppuccin_icon_window_activity "󰖲"
            set -g @catppuccin_icon_window_bell "󰂞"


            # set -g @catppuccin_window_current_format_directory_text "#{b:pane_current_path}"
            set -g @catppuccin_window_right_separator "█ "
            set -g @catppuccin_window_number_position "right"
            set -g @catppuccin_window_middle_separator " | "
            set -g @catppuccin_window_default_fill "none"  # all | number | none
            set -g @catppuccin_window_current_fill "all"

            set -g @catppuccin_status_fill "icon" # icon | all
            set -g @catppuccin_status_connect_separator "no" # disable blending of the separator to tmux bg
            set -g @catppuccin_status_modules_left "session"
            # opts: application | directory | session | user | host | date_time | battery
            set -g @catppuccin_status_modules_right "application directory date_time"
            set -g @catppuccin_status_left_separator "█"
            set -g @catppuccin_status_right_separator "█ "

            set -g @catppuccin_application_color "#e27878"
            set -g @catppuccin_directory_color "#a093c7"
            set -g @catppuccin_session_color "#b4be82"
            set -g @catppuccin_date_time_color "#84a0c6"
          '';
        }
        # Note: must come after catpuccin, or anything that edits the right status bar
        {
          plugin = tmuxPlugins.resurrect;
          extraConfig = "set -g @resurrect-capture-pane-contents 'on'";
        }
        {
          plugin = tmuxPlugins.continuum;
          extraConfig = "set -g @continuum-restore 'on'";
        }
      ];
    };
    zsh = {
      enable = true;
      package = upkgs.zsh;
      enableAutosuggestions = false; # we'll handle this in antidote
      enableCompletion = false; # we'll handle this in antidote
      defaultKeymap = "viins"; # Vim INSERT mode; hit ESC to toggle between VI INSERT/VISUAL
      dotDir = ".config/zsh";
      autocd = true;
      # add to .zshenv
      envExtra = ''
        export LC_ALL=en_GB.UTF-8
      '';
      # add to .zshrc
      initExtra = ''
        ${
          if pkgs.stdenv.isDarwin
          then "
            print_pid_cwd() {
              local pid=$1;
              lsof -a -p $pid -d cwd -Fn
            }
          "
          else ""
        }
      '';
      # add to .zshrc, top of file
      initExtraFirst = ''
        # TODO: This needs to come before `antidote load` to avoid "compdef not found" error
        autoload -Uz compinit && compinit

        # Docker*
        zstyle ':completion:*:*:docker:*' option-stacking yes
        zstyle ':completion:*:*:docker-*:*' option-stacking yes

        # see: https://github.com/ohmyzsh/ohmyzsh/issues/11817#issuecomment-1655430206
        zstyle ':omz:plugins:docker' legacy-completion yes
      '';
      # add to .zshrc, top of file, env vars, e.g. POWERLINE_9K, etc
      localVariables = {
        CASE_SENSITIVE = "true";
        HIST_STAMPS = "yyyy-mm-dd";
        # TODO: pass in via `vars`
        # BROWSER = "brave";
        # EDITOR = "nvim";
        # TERMINAL = "alacritty";
        # PAGER = "less";
        # VISUAL = "nvim";
      };
      # # add to .zprofile
      # profileExtra = '''';
      # # env vars set for each session
      # sessionVariables = { };
      shellAliases = {
        grep = "grep --color=auto";
        fgrep = "fgrep --color=auto";
        egrep = "egrep --color=auto";
        sudo = "sudo "; # enable aliases to be sudo'd
        cl = "clear"; # TODO: move to keybind
        l = "ls -lF ${
          if pkgs.stdenv.isDarwin
          then "-G"
          else "--color"
        }";
        la = "ls -laF ${
          if pkgs.stdenv.isDarwin
          then "-G"
          else "--color"
        }";
        git_prune_branches = "git fetch && git remote prune origin && git br -v | grep gone | awk '{print $1;}' | xargs -n 1 git br -d";
      };
      history.ignoreAllDups = true;
      antidote = {
        enable = true;
        package = upkgs.antidote;
        useFriendlyNames = true;
        plugins = [
          ### Regular plugins
          ### Utilities
          "ohmyzsh/ohmyzsh   path:lib"
          # "ohmyzsh/ohmyzsh   path:copybuffer"
          # "ohmyzsh/ohmyzsh   path:copyfile"
          # "ohmyzsh/ohmyzsh   path:copypath"
          # "ohmyzsh/ohmyzsh   path:extract"
          # "ohmyzsh/ohmyzsh   path:fancy-ctrl-z"
          # "ohmyzsh/ohmyzsh   path:colored-man-pages"
          # "ohmyzsh/ohmyzsh   path:git-extras"
          # "ohmyzsh/ohmyzsh   path:direnv"
          # "ohmyzsh/ohmyzsh   path:node"
          # # completions and/or aliases for various cli tools
          # "ohmyzsh/ohmyzsh   path:plugins/kubectl"
          # "ohmyzsh/ohmyzsh   path:plugins/npm"
          # "ohmyzsh/ohmyzsh   path:plugins/yarn"
          "ohmyzsh/ohmyzsh   path:plugins/git"
          # "ohmyzsh/ohmyzsh   path:plugins/docker"
          # "ohmyzsh/ohmyzsh   path:plugins/terraform"
          # "romkatv/zsh-bench kind:path"
          "djui/alias-tips"
          ### Prompts
          ### Framework: zsh-utils
          "belak/zsh-utils  path:history"
          ### Deferred plugins
          "zdharma-continuum/fast-syntax-highlighting     kind:defer"
          ### completions
          "zsh-users/zsh-completions                      path:src kind:fpath"
          "belak/zsh-utils                                path:completion"
          ### Final Plugins
          "zsh-users/zsh-autosuggestions                  kind:defer"
          "zsh-users/zsh-history-substring-search"
        ];
      };
    };
  };

  editorconfig = {
    enable = true;
    settings = {
      "*" = {
        trim_trailing_whitespace = true;
        insert_final_newline = true;
        indent_style = "space";
        end_of_line = "lf";
        indent_size = 2;
        charset = "utf-8";
      };
    };
  };

  wayland.windowManager.hyprland = {
    enable = true;
    settings = {
      "$mod" = "SUPER";

      general = {
        layout = "master";
        border_size = 2;
        gaps_in = 5;
        gaps_out = 5;
        cursor_inactive_timeout = 5;
      };

      misc = {
        disable_hyprland_logo = "yes";
      };

      master = {
        # See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
        new_is_master = true;
      };

      decoration = {
        rounding = 2;
        dim_inactive = true;
      };

      input = {
        kb_layout = "gb";
      };

      exec-once = [
        "swww init"
        "mako"
        "waybar"
        # "wl-paste --watch cliphist store"
        # "blueman-applet"
        # "nm-applet --indicator"
      ];

      # Triggers on release of keys
      bindr = [
      ];

      bind = [
        "$mod, SPACE, exec, pkill wofi || wofi"
        "$mod, B, exec, brave"
        "$mod, RETURN, exec, alacritty"
        # ", Print, exec, grimblast copy area"
        # compositor commands
        "$mod SHIFT, E, exec, pkill Hyprland"
        "$mod, Q, killactive,"
        "$mod, F, fullscreen,"
        "$mod, G, togglegroup,"
        "$mod SHIFT, N, changegroupactive, f"
        "$mod SHIFT, P, changegroupactive, b"
        "$mod, R, togglesplit,"
        "$mod, T, togglefloating,"
        "$mod, P, pseudo,"
        "$mod ALT, ,resizeactive,"

        # Move window focus
        "$mod, H, movefocus, l"
        "$mod, K, movefocus, u"
        "$mod, L, movefocus, r"
        "$mod, J, movefocus, d"
        # Move window position
        "$mod CTRL, H, movewindow, l"
        "$mod CTRL, K, movewindow, u"
        "$mod CTRL, L, movewindow, r"
        "$mod CTRL, J, movewindow, d"

        # Move active window to workspace [1-6] (don't follow)
        "$mod CTRL, 1, movetoworkspacesilent, 1"
        "$mod CTRL, 2, movetoworkspacesilent, 2"
        "$mod CTRL, 3, movetoworkspacesilent, 3"
        "$mod CTRL, 4, movetoworkspacesilent, 4"
        "$mod CTRL, 5, movetoworkspacesilent, 5"
        "$mod CTRL, 6, movetoworkspacesilent, 6"
        "$mod CTRL, braketleft, movetoworkspacesilent, -1"
        "$mod CTRL, braketright, movetoworkspacesilent, +1"
        # Move active window to workspace [1-6] (and follow)
        "$mod ALT, 1, movetoworkspace, 1"
        "$mod ALT, 2, movetoworkspace, 2"
        "$mod ALT, 3, movetoworkspace, 3"
        "$mod ALT, 4, movetoworkspace, 4"
        "$mod ALT, 5, movetoworkspace, 5"
        "$mod ALT, 6, movetoworkspace, 6"
        "$mod ALT, braketleft, movetoworkspace, -1"
        "$mod ALT, braketright, movetoworkspace, +1"
        # Switch to workspace [1-6]
        "$mod, 1, workspace, 1"
        "$mod, 2, workspace, 2"
        "$mod, 3, workspace, 3"
        "$mod, 4, workspace, 4"
        "$mod, 5, workspace, 5"
        "$mod, 6, workspace, 6"

        # TODO: Media Controls
      ];

      windowrulev2 = [
        "animation popin,class:^(dolphin)$"
        "opacity 0.8 0.8,class:^(dolphin)$"
        # Wofi
        "move cursor -3% -105%,class:^(wofi)$"
        "noanim,class:^(wofi)$"
        "opacity 0.8 0.6,class:^(wofi)$"
      ];
    };
  };

  # make stuff work on Wayland
  home.sessionVariables = {
    GDK_BACKEND = "wayland,x11";
    NIXOS_OZONE_WL = "1";
    QT_AUTO_SCREEN_SCALE_FACTOR = 1;
    QT_QPA_PLATFORM = "wayland";
    QT_WAYLAND_DISABLE_WINDOWDECORATION = 1;
    SDL_VIDEODRIVER = "wayland";
    XDG_SESSION_TYPE = "wayland";
    XDG_CURRENT_DESKTOP = "Hyprland";
    XDG_SESSION_DESKTOP = "Hyprland";
  };

  # Manage Dotfiles
  home.file = {
    # TODO: Better way to get flake location?
    ".config/nvim/".source = config.lib.file.mkOutOfStoreSymlink "${vars.homedir}/Code/${vars.username}/dotfiles/nvim";
    ".config/wofi/config".text = ''
      width=1024
      height=400
      location=center
      show=drun
      prompt=Search...
      filter_rate=100
      allow_markup=true
      no_actions=true
      halign=fill
      orientation=vertical
      content_halign=fill
      insensitive=true
      allow_images=true
      image_size=32
      gtk_dark=true
      dynamic_lines=true
    '';
    ".config/wofi/style.css".text = ''
      window {
          margin: 0px;
          border: 5px solid #1e1e2e;
          background-color: #cdd6f4;
          border-radius: 0px;
      }

      #input {
          padding: 4px;
          margin: 4px;
          padding-left: 20px;
          border: none;
          color: #cdd6f4;
          font-weight: bold;
          background-color: #1e1e2e;
         	outline: none;
          border-radius: 15px;
          margin: 10px;
          margin-bottom: 2px;
      }
      #input:focus {
          border: 0px solid #1e1e2e;
          margin-bottom: 0px;
      }

      #inner-box {
          margin: 4px;
          border: 10px solid #1e1e2e;
          color: #cdd6f4;
          font-weight: bold;
          background-color: #1e1e2e;
          border-radius: 15px;
      }

      #outer-box {
          margin: 0px;
          border: none;
          border-radius: 15px;
          background-color: #1e1e2e;
      }

      #scroll {
          margin-top: 5px;
          border: none;
          border-radius: 15px;
          margin-bottom: 5px;
          /* background: rgb(255,255,255); */
      }

      #img:selected {
          background-color: #89b4fa;
          border-radius: 15px;
      }

      #text:selected {
          color: #cdd6f4;
          margin: 0px 0px;
          border: none;
          border-radius: 15px;
          background-color: #89b4fa;
      }

      #entry {
          margin: 0px 0px;
          border: none;
          border-radius: 15px;
          background-color: transparent;
      }

      #entry:selected {
          margin: 0px 0px;
          border: none;
          border-radius: 15px;
          background-color: #89b4fa;
      }
    '';
  };

  # Let Home Manager manage itself
  programs.home-manager.enable = true;
  home.stateVersion = "23.05";
}
