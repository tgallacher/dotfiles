{self, ...}: {
  # https://blog.gitbutler.com/how-git-core-devs-configure-git/
  programs.git = {
    enable = true;
    aliases = {
      co = "checkout";
      ci = "commit";
      st = "status -s";
      br = "branch";
      last = "log -1 HEAD";
      dwdiff = "!f() { git diff $@ | dwdiff --diff-input -P -c | less -R; }; f";
      plog = "!l() { git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit $@; }; l";
      plog10 = "plog -10";
      p = "plog -";
      bls = "branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate";
    };
    delta = {
      enable = true;
      options = {
        navigate = true; # use n and N to move between diff sections
        light = false; # light mode?
        side-by-side = true;
        line-numbers = true;
      };
    };
    extraConfig = {
      # interactive = { diffFilter = "delta --color-only"; };
      advice.skippedCherryPicks = false;
      branch.sort = "-committerdate";
      # column.ui = "auto";
      core.editor = "vim";
      commit.verbose = false; # show diff patch in commit message as comment; disable as we use vim-fugitive
      # re-apply rebase choice if it comes up again
      rerere = {
        enables = true;
        autoupdate = true;
      };
      diff = {
        algorithm = "histogram";
        colorMoved = "plain";
        mnemonicPrefix = true;
        renames = true;
        submodule = "log"; # show submodule changes + commits `<` commits coming in from remote; `>` commits needing pushed to remote
      };
      fetch = {
        prune = true;
        pruneTags = true;
        all = true;
      };
      init.defaultBranch = "main";
      merge.conflictstyle = "diff3"; # (just 'diff3' if git version < 2.3)
      pull.rebase = true;
      push = {
        default = "simple";
        autoSetupRemote = true;
        followTags = false; # auto push tags that are on local but not on remote
      };
      rebase.instructionFormat = "(%an) %s";
      status.submodulesummary = true; # show a short summary of submodule changes
      submodule.recurse = true; # keep submodule state sync'd across branches
      tag.sort = "version:refname";
      credential = {
        "https://github.com" = {
          helper = "store";
        };
      };
    };
    userEmail = "tgallacher@users.noreply.github.com";
    userName = "Tom Gallacher";
    ignores = [
      "_local" # local dumping ground
      ".DS_Store"
      # Logs
      "logs"
      "*.log"
      "npm-debug.log*"
      "yarn-debug.log*"
      "yarn-error.log*"
      # Runtime data
      "pids"
      "*.pid"
      "*.seed"
      "*.pid.lock"
      # Directory for instrumented libs generated by jscoverage/JSCover
      "lib-cov"
      # Coverage directory used by tools like istanbul
      "coverage"
      # nyc test coverage
      ".nyc_output"
      # Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
      ".grunt"
      # Bower dependency directory (https://bower.io/)
      "bower_components"
      # node-waf configuration
      ".lock-wscript"
      # Compiled binary addons (https://nodejs.org/api/addons.html)
      "build/Release"
      # Dependency directories
      "node_modules/"
      # Typescript v1 declaration files
      "typings/"
      # Optional npm cache directory
      ".npm"
      # Optional eslint cache
      ".eslintcache"
      # Optional REPL history
      ".node_repl_history"
      # Output of 'npm pack'
      "*.tgz"
      # Yarn Integrity file
      ".yarn-integrity"
      # dotenv environment variables file
      ".env"
      # next.js build output
      ".next"
      # Terraform
      ".terraform/"
      # IDEs
      ".vscode/"
      ".idea/"
      # Misc
      "_scratch/"
    ];
  };
}
